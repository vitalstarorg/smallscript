# coding=utf-8
# Copyright 2024 Vital Star Foundation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import skip, skipUnless
from os import environ as env
env['TESTALL'] = '1'

from smallscript.SObject import *
from smallscript.core.PythonExt import ObjAdapter
from smallscript.Closure import Closure
from tests.TestBase import SmallScriptTest, DebugClosure
from tests.TestSObj14 import TestSObj14

# Use this to test individual failed test cases.
# This won't run when "all_tests" is run
#  $ TESTALL=1 python -m unittest discover -s .

class PyClass():
    def __init__(self):
        self.py11 = 111

    def addPy11(self, number=1):
        return number + self.py11

# @skip
class Test_Diagnostics(SmallScriptTest):
    @classmethod
    def setUpClass(cls):
        pkg = sscontext.getOrNewPackage('Test_Interpreter2').importSingleSObject(DebugClosure)

    @skipUnless('TESTALL' not in env, "disabled")
    def test100_hack(self):
        # General hack before following hacks
        pkg = sscontext.loadPackage('tests')
        tobj = TestSObj14()
        tobj.attr11(100)
        tobj.cattr12('200')
        metaclass = tobj.metaclass()
        scope = sscontext.createScope()
        scope['tobj'] = tobj

        ss = ":fullname | | tmp1 | tmp1 := fullname | + ', ' | + 'hello'"
        # ss = ":param1| param1 + 13"
        closure = Closure().name("test").interpret(ss)
        closure.toPython().print()
        closure.compile()
        res = closure(scope, "John")
        self.assertEqual("John, hello", res)
        return

    @skipUnless('TESTALL' not in env, "disabled")
    def test200_copypaste_python_src(self):
        # Copy and paste generated Pyton code into this source to debug the generated code.
        pkg = sscontext.loadPackage('tests')
        tobj = TestSObj14()
        tobj.attr11(100)
        tobj.cattr12('200')
        metaclass = tobj.metaclass()
        scope = sscontext.createScope()
        scope['tobj'] = tobj

        # This is generated by closure.pysource().print() below for easier debugging
        # as PyCharm needed to be restarted before it can debug into a generated tmp file.
        def test(scope):
            def unnamed_296d5eab92dbf300(scope):
                _ = 7 + scope["outer"]
                return _

            scope.locals()['outer'] = scope['nil']
            scope["outer"] = 13
            _ = scope.newInstance('Closure').takePyFunc(unnamed_296d5eab92dbf300).value()
            return _

        unnamed = Closure().takePyFunc(test)
        res = unnamed(scope)

        ss = ":param | | outer| outer := 13; [7 + outer] value + param"
        # ss = ":param | param"
        closure = Closure().name("test").interpret(ss)
        closure.toPython().print()
        closure.compile()
        res = closure(scope, 5)
        self.assertEqual(25, res)
        return

    @skipUnless('TESTALL' not in env, "disabled")
    def test300_DebugClosure(self):
        # Enhanced debugging using DebugClosure
        pkg = sscontext.loadPackage('tests')
        tobj = TestSObj14().attr11(100).cattr12('200')
        metaclass = tobj.metaclass()
        scope = sscontext.createScope()
        scope['tobj'] = tobj

        ss = "123 + 1.2"; expect = 124.2
        closure = DebugClosure()
        # closure.toDebug(true_).loglevel(0)
        closure.interpret(ss)
        # closure.toDebug(true_).loglevel(0)
        res = closure(scope)
        self.assertEqual(expect, res)
        return

    @skipUnless('TESTALL' not in env, "disabled")
    def test310_python(self):
        class PyClass():
            def __init__(self):
                self.py11 = 111

        pkg = sscontext.loadPackage('tests')
        scope = sscontext.createScope()

        tobj = TestSObj14().attr11(100).cattr12('200')
        pyobj = PyClass()
        scope.locals()['tobj'] = tobj
        scope.locals()['pyobj'] = pyobj
        tobj.attr11(pyobj)
        ss = "tobj.attr11.py11 := 123"
        closure = Closure().interpret(ss)
        res = closure(scope)
        self.assertEqual(123, res)
        self.assertEqual(123, pyobj.py11)
        ObjAdapter().object(scope['tobj']).getRef('attr11.py11').py11 = 0
        self.assertEqual(0, pyobj.py11)
        src = closure.toPython().split("\n")[1]
        self.assertEqual("  _ = scope.newInstance('ObjAdapter').object(scope['tobj']).getRef('attr11.py11').py11 = 123", src)
        res = closure(scope)
        self.assertEqual(123, res)
        self.assertEqual(123, pyobj.py11)

        tobj = TestSObj14().attr11(100).cattr12('200')
        pyobj = PyClass()
        scope.locals()['tobj'] = tobj
        scope.locals()['pyobj'] = pyobj
        pyobj.py11 = tobj
        ss = "pyobj.py11.attr11 := 123"
        closure = Closure().interpret(ss)
        res = closure(scope)
        self.assertEqual(123, res)
        self.assertEqual(123, tobj.attr11())
        ObjAdapter().object(scope['pyobj']).getRef('py11.attr11').attr11 = 0
        self.assertEqual(0, tobj.attr11())
        src = closure.toPython().split("\n")[1]
        self.assertEqual("  _ = scope.newInstance('ObjAdapter').object(scope['pyobj']).getRef('py11.attr11').attr11 = 123", src)
        res = closure(scope)
        self.assertEqual(123, res)
        self.assertEqual(123, tobj.attr11())

    @skipUnless('TESTALL' not in env, "disabled")
    def test320_dot_notation(self):
        scope = sscontext.createScope()

        sspkg = sscontext.getOrNewPackage('smallscript')
        ss = "sscontext.packages.smallscript"
        closure = Closure().compile(ss)
        res = closure(scope)
        self.assertEqual(sspkg, res)

        ss = "os.environ.LOG_LEVEL := 'DEBUG'"
        closure = Closure().compile(ss)
        res = closure(scope)
        self.assertEqual('DEBUG', os.environ['LOG_LEVEL'])
        src = closure.toPython().split("\n")[1]
        self.assertEqual("  _ = scope.newInstance('ObjAdapter').object(scope['os']).getRef('environ.LOG_LEVEL').LOG_LEVEL = 'DEBUG'", src)

        ss = "loglevel := os.environ.LOG_LEVEL"
        closure = Closure().compile(ss)
        res = closure(scope)
        self.assertEqual(os.environ['LOG_LEVEL'], res)


    # @skipUnless('TESTALL' not in env, "disabled")
    def test900_hack(self):
        pkg = sscontext.loadPackage('tests')
        scope = sscontext.createScope()
        tobj = TestSObj14().attr11(100).cattr12('200')
        pyobj = PyClass()
        scope.locals()['tobj'] = tobj
        scope.locals()['pyobj'] = pyobj
        tobj.attr11(pyobj)
        sscontext.asSObj(pyobj)

        ss = "self wte wpe lnorm1: 0 | attn: 0 | sum lnorm2: 0 | ffn: 0 | sum x"
        closure = sscontext.interpret(ss)
        closure = sscontext.compile(ss)


        closure = sscontext.compile("| a | a := 'hello'; scope")
        res = sscontext.ssrun(closure)
        self.assertEqual('hello', res['a'])

        closure = sscontext.compile(":param | self.py11 + param")
        res = pyobj.ssrun(closure, 12)
        self.assertEqual(123, res)


        return

        closure = Closure().compile('py os environ')
            # scope["py"].os().environ()
        closure = Closure().compile("py isinstance: obj attr: 'name'")
            # scope["py"].isinstance__attr__(scope["obj"], "name")
            # getattr(globals()['builtins'],'isinstance')

        # Fully functioning Python