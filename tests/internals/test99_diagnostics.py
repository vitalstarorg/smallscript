# coding=utf-8
# Copyright 2024 Vital Star Foundation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import skip, skipUnless
from os import environ as env
env['TESTALL'] = '1'

from smallscript.SObject import *
from smallscript.Closure import Closure
# from smallscript.Step import *
from tests.TestBase import SmallScriptTest, DebugClosure
from tests.TestSObj14 import TestSObj14

# Use this to test individual failed test cases.
# This won't run when "all_tests" is run
#  $ TESTALL=1 python -m unittest discover -s .

class PyClass():
    def __init__(self):
        self.py11 = 111

# @skip
class Test_Diagnostics(SmallScriptTest):
    @classmethod
    def setUpClass(cls):
        pkg = rootContext.getOrNewPackage('Test_Interpreter2').importSingleSObject(DebugClosure)

    @skipUnless('TESTALL' not in env, "disabled")
    def test100_hack(self):
        # General hack before following hacks
        pkg = rootContext.loadPackage('tests')
        tobj = TestSObj14()
        tobj.attr11(100)
        tobj.cattr12('200')
        metaclass = tobj.metaclass()
        scope = rootContext.createScope()
        scope['tobj'] = tobj

        ss = ":fullname | | tmp1 | tmp1 := fullname | + ', ' | + 'hello'"
        # ss = ":param1| param1 + 13"
        closure = Closure().name("test").interpret(ss)
        closure.toPython().print()
        closure.compile()
        res = closure(scope, "John")
        self.assertEqual("John, hello", res)
        return

    @skipUnless('TESTALL' not in env, "disabled")
    def test200_copypaste_python_src(self):
        # Copy and paste generated Pyton code into this source to debug the generated code.
        pkg = rootContext.loadPackage('tests')
        tobj = TestSObj14()
        tobj.attr11(100)
        tobj.cattr12('200')
        metaclass = tobj.metaclass()
        scope = rootContext.createScope()
        scope['tobj'] = tobj

        # This is generated by closure.pysource().print() below for easier debugging
        # as PyCharm needed to be restarted before it can debug into a generated tmp file.
        def test(scope):
            def unnamed_296d5eab92dbf300(scope):
                _ = 7 + scope["outer"]
                return _

            scope.locals()['outer'] = scope['nil']
            scope["outer"] = 13
            _ = scope.newInstance('Closure').takePyFunc(unnamed_296d5eab92dbf300).value()
            return _

        unnamed = Closure().takePyFunc(test)
        res = unnamed(scope)

        ss = ":param | | outer| outer := 13; [7 + outer] value + param"
        # ss = ":param | param"
        closure = Closure().name("test").interpret(ss)
        closure.toPython().print()
        closure.compile()
        res = closure(scope, 5)
        self.assertEqual(25, res)
        return

    @skipUnless('TESTALL' not in env, "disabled")
    def test300_DebugClosure(self):
        # Enhanced debugging using DebugClosure
        pkg = rootContext.loadPackage('tests')
        tobj = TestSObj14().attr11(100).cattr12('200')
        metaclass = tobj.metaclass()
        scope = rootContext.createScope()
        scope['tobj'] = tobj

        ss = "123 + 1.2"; expect = 124.2
        closure = DebugClosure()
        # closure.toDebug(true_).loglevel(0)
        closure.interpret(ss)
        # closure.toDebug(true_).loglevel(0)
        res = closure(scope)
        self.assertEqual(expect, res)
        return

    @skipUnless('TESTALL' not in env, "disabled")
    def test500_hack(self):
        class PyClass():
            def __init__(self):
                self.py11 = 111

        pkg = rootContext.loadPackage('tests')
        scope = rootContext.createScope()
        tobj = TestSObj14().attr11(100).cattr12('200')

        pyobj = PyClass()
        scope.locals()['tobj'] = tobj
        scope.locals()['pyobj'] = pyobj
        tobj.attr11(pyobj)
        ss = "tobj.attr11.py11 := 123"       # this is an optinal case, it should be tobj attr11: 123
        closure = Closure().interpret(ss)
        res = closure(scope)
        self.assertEqual(123, res)
        ObjAdapter().object(scope['tobj']).attr11.py11 = 0

        pyobj = PyClass()
        scope.locals()['tobj'] = tobj
        scope.locals()['pyobj'] = pyobj
        pyobj.py11 = tobj
        ss = "pyobj.py11.attr11 := 123"       # this is an optinal case, it should be tobj attr11: 123
        closure = Closure().interpret(ss)
        res = closure(scope)
        self.assertEqual(123, res)
        ObjAdapter().object(scope['pyobj']).py11.attr11 = 0


        self.assertEqual(123, tobj.attr11())
        src = closure.toPython().split("\n")[1]
        self.assertEqual("  _ = scope.newInstance('ObjAdapter').object(scope['tobj']).attr11 = 123", src)
        ObjAdapter().object(scope['tobj']).attr11 = 0
        closure.compile()
        res = closure(scope)
        self.assertEqual(123, res)
        self.assertEqual(123, tobj.attr11())

        return


    # @skipUnless('TESTALL' not in env, "disabled")
    def test700_hack(self):
        pkg = rootContext.loadPackage('tests')
        scope = rootContext.createScope()
        tobj = TestSObj14().attr11(100).cattr12('200')
        scope.locals()['tobj'] = tobj

        ss = "a := <python: 'scope[\"tobj\"]'>"
        closure = Closure().interpret(ss)
        src = closure.toPython().split("\n")[1]
        self.assertEqual("  _ = scope['a'] = scope[\"tobj\"]", src)
        res = closure(scope)
        self.assertEqual('scope["tobj"]', res)
        closure.compile(ss)
        res = closure(scope)
        self.assertEqual(tobj, scope['a'])

        ss = "<python: 'scope[\"tobj\"]'> := 123"
        closure = Closure().interpret(ss)
        src = closure.toPython().split("\n")[1]
        self.assertEqual('  _ = scope["tobj"] = 123', src)
        res = closure(scope)
        closure.compile(ss)
        res = closure(scope)
        self.assertEqual(123, scope['tobj'])

    # @skipUnless('TESTALL' not in env, "disabled")
    def test800_hack(self):
        pkg = rootContext.loadPackage('tests')
        scope = rootContext.createScope()
        tobj = TestSObj14().attr11(100).cattr12('200')
        pyobj = PyClass()
        scope.locals()['tobj'] = tobj
        scope.locals()['pyobj'] = pyobj

        ss = "tobj.attr11 := 123"       # this is an optinal case, it should be tobj attr11: 123
        closure = Closure().interpret(ss)
        res = closure(scope)
        self.assertEqual(123, res)
        self.assertEqual(123, tobj.attr11())
        src = closure.toPython().split("\n")[1]
        self.assertEqual("  _ = scope.newInstance('ObjAdapter').object(scope['tobj']).attr11 = 123", src)
        ObjAdapter().object(scope['tobj']).attr11 = 0
        closure.compile()
        res = closure(scope)
        self.assertEqual(123, res)
        self.assertEqual(123, tobj.attr11())

        ss = "pyobj.py11 := 222"        # for Python protocol
        closure = Closure().interpret(ss)
        res = closure(scope)
        self.assertEqual(222, res)
        self.assertEqual(222, pyobj.py11)
        src = closure.toPython().split("\n")[1]
        self.assertEqual("  _ = scope.newInstance('ObjAdapter').object(scope['pyobj']).py11 = 222", src)
        ObjAdapter().object(scope['pyobj']).py11 = 0
        closure.compile()
        res = closure(scope)
        self.assertEqual(222, res)
        self.assertEqual(222, pyobj.py11)

        ss = "a := tobj.attr11"
        closure = Closure().interpret(ss)
        res = closure(scope)
        self.assertEqual(123, res)
        self.assertEqual(123, scope['a'])
        src = closure.toPython().split("\n")[1]
        self.assertEqual("  _ = scope['a'] = scope.newInstance('ObjAdapter').object(scope['tobj']).attr11", src)
        scope['a'] = 0
        closure.compile()
        res = closure(scope)
        self.assertEqual(123, res)
        self.assertEqual(123, scope['a'])

        ss = "b := pyobj.py11"
        closure = Closure().interpret(ss)
        res = closure(scope)
        self.assertEqual(222, res)
        self.assertEqual(222, scope['b'])
        src = closure.toPython().split("\n")[1]
        self.assertEqual("  _ = scope['b'] = scope.newInstance('ObjAdapter').object(scope['pyobj']).py11", src)
        # src = closure.toPython().print()
        scope['b'] = 0
        closure.compile()
        res = closure(scope)
        self.assertEqual(222, res)
        self.assertEqual(222, scope['b'])

    @skipUnless('TESTALL' not in env, "disabled")
    def test900_hack(self):
        pkg = rootContext.loadPackage('tests')
        scope = rootContext.createScope()
        tobj = TestSObj14().attr11(100).cattr12('200')
        scope.locals()['tobj'] = tobj

        ss = ""
        closure = Closure().interpret(ss)
        src = closure.toPython().print()
        # test to set obj other than SObject
        self.assertEqual('  _ = def hello:', src)
        # self.assertEqual("  _ = isinstance(scope['tobj'].attr11().asString(), str)", src)
        res = closure(scope)
        self.assertEqual("def hello:", res)

        ss = "<python: tobj> := 123"
        closure = Closure().interpret(ss)
        closure.toPython().print()
        res = closure(scope)
        closure.compile(ss)
        res = closure(scope)
        res.print()
        return

        # ss = "'isinstance(' + tobj attr11 asString + ', SObject)'"
        closure = Closure().compile(f"<py: {ss} >")
        # closure = Closure().compile("<py: 'os.environ' >")
        closure.toPython().print()
        res = closure(scope)
        res.print()
        return

        closure = Closure().compile('py os environ')
            # scope["py"].os().environ()
        closure = Closure().compile("py isinstance: obj attr: 'name'")
            # scope["py"].isinstance__attr__(scope["obj"], "name")
            # getattr(globals()['builtins'],'isinstance')

        closure = Closure().compile("<python: tobj attr11>")
            # scope["py"].isinstance__attr__(scope["obj"], "name")
            # getattr(globals()['builtins'],'isinstance')
        closure.toPython().print()
        res = closure(scope)

        # Fully functioning Python