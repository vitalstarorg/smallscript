# Generated from SmallScript.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,3,0,78,8,0,1,
        0,1,0,1,0,1,1,3,1,84,8,1,1,1,1,1,4,1,88,8,1,11,1,12,1,89,1,2,3,2,
        93,8,2,1,2,4,2,96,8,2,11,2,12,2,97,1,3,3,3,101,8,3,1,3,4,3,104,8,
        3,11,3,12,3,105,1,3,1,3,4,3,110,8,3,11,3,12,3,111,1,4,1,4,5,4,116,
        8,4,10,4,12,4,119,9,4,1,5,5,5,122,8,5,10,5,12,5,125,9,5,1,5,1,5,
        1,6,1,6,1,7,1,7,5,7,133,8,7,10,7,12,7,136,9,7,1,7,1,7,1,8,1,8,5,
        8,142,8,8,10,8,12,8,145,9,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,4,16,166,
        8,16,11,16,12,16,167,1,17,1,17,1,18,1,18,1,19,1,19,1,20,4,20,177,
        8,20,11,20,12,20,178,1,20,5,20,182,8,20,10,20,12,20,185,9,20,1,21,
        1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,
        3,36,227,8,36,2,134,143,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,7,3,0,9,10,13,13,32,
        32,7,0,37,37,42,44,47,47,60,62,64,64,92,92,126,126,3,0,38,38,45,
        45,63,63,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,3,0,48,57,65,70,97,102,245,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,77,1,0,0,
        0,3,83,1,0,0,0,5,92,1,0,0,0,7,100,1,0,0,0,9,113,1,0,0,0,11,123,1,
        0,0,0,13,128,1,0,0,0,15,130,1,0,0,0,17,139,1,0,0,0,19,148,1,0,0,
        0,21,150,1,0,0,0,23,152,1,0,0,0,25,154,1,0,0,0,27,156,1,0,0,0,29,
        158,1,0,0,0,31,160,1,0,0,0,33,165,1,0,0,0,35,169,1,0,0,0,37,171,
        1,0,0,0,39,173,1,0,0,0,41,176,1,0,0,0,43,186,1,0,0,0,45,188,1,0,
        0,0,47,190,1,0,0,0,49,193,1,0,0,0,51,195,1,0,0,0,53,197,1,0,0,0,
        55,199,1,0,0,0,57,203,1,0,0,0,59,206,1,0,0,0,61,209,1,0,0,0,63,211,
        1,0,0,0,65,213,1,0,0,0,67,215,1,0,0,0,69,217,1,0,0,0,71,220,1,0,
        0,0,73,223,1,0,0,0,75,78,3,7,3,0,76,78,3,5,2,0,77,75,1,0,0,0,77,
        76,1,0,0,0,78,79,1,0,0,0,79,80,3,53,26,0,80,81,3,5,2,0,81,2,1,0,
        0,0,82,84,3,39,19,0,83,82,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,
        87,3,55,27,0,86,88,3,67,33,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,
        0,0,0,89,90,1,0,0,0,90,4,1,0,0,0,91,93,3,39,19,0,92,91,1,0,0,0,92,
        93,1,0,0,0,93,95,1,0,0,0,94,96,3,65,32,0,95,94,1,0,0,0,96,97,1,0,
        0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,6,1,0,0,0,99,101,3,39,19,0,100,
        99,1,0,0,0,100,101,1,0,0,0,101,103,1,0,0,0,102,104,3,65,32,0,103,
        102,1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,
        107,1,0,0,0,107,109,3,29,14,0,108,110,3,65,32,0,109,108,1,0,0,0,
        110,111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,8,1,0,0,0,113,
        117,3,35,17,0,114,116,3,13,6,0,115,114,1,0,0,0,116,119,1,0,0,0,117,
        115,1,0,0,0,117,118,1,0,0,0,118,10,1,0,0,0,119,117,1,0,0,0,120,122,
        3,13,6,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,
        1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,3,37,18,0,127,12,
        1,0,0,0,128,129,7,0,0,0,129,14,1,0,0,0,130,134,5,39,0,0,131,133,
        9,0,0,0,132,131,1,0,0,0,133,136,1,0,0,0,134,135,1,0,0,0,134,132,
        1,0,0,0,135,137,1,0,0,0,136,134,1,0,0,0,137,138,5,39,0,0,138,16,
        1,0,0,0,139,143,5,34,0,0,140,142,9,0,0,0,141,140,1,0,0,0,142,145,
        1,0,0,0,143,144,1,0,0,0,143,141,1,0,0,0,144,146,1,0,0,0,145,143,
        1,0,0,0,146,147,5,34,0,0,147,18,1,0,0,0,148,149,5,91,0,0,149,20,
        1,0,0,0,150,151,5,93,0,0,151,22,1,0,0,0,152,153,5,41,0,0,153,24,
        1,0,0,0,154,155,5,40,0,0,155,26,1,0,0,0,156,157,5,124,0,0,157,28,
        1,0,0,0,158,159,5,46,0,0,159,30,1,0,0,0,160,161,5,59,0,0,161,32,
        1,0,0,0,162,166,7,1,0,0,163,166,3,27,13,0,164,166,7,2,0,0,165,162,
        1,0,0,0,165,163,1,0,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,
        1,0,0,0,167,168,1,0,0,0,168,34,1,0,0,0,169,170,5,60,0,0,170,36,1,
        0,0,0,171,172,5,62,0,0,172,38,1,0,0,0,173,174,5,45,0,0,174,40,1,
        0,0,0,175,177,7,3,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,
        0,0,0,178,179,1,0,0,0,179,183,1,0,0,0,180,182,7,4,0,0,181,180,1,
        0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,42,1,0,
        0,0,185,183,1,0,0,0,186,187,5,94,0,0,187,44,1,0,0,0,188,189,5,58,
        0,0,189,46,1,0,0,0,190,191,5,58,0,0,191,192,5,61,0,0,192,48,1,0,
        0,0,193,194,5,35,0,0,194,50,1,0,0,0,195,196,5,36,0,0,196,52,1,0,
        0,0,197,198,5,101,0,0,198,54,1,0,0,0,199,200,5,49,0,0,200,201,5,
        54,0,0,201,202,5,114,0,0,202,56,1,0,0,0,203,204,5,35,0,0,204,205,
        5,40,0,0,205,58,1,0,0,0,206,207,5,35,0,0,207,208,5,123,0,0,208,60,
        1,0,0,0,209,210,5,125,0,0,210,62,1,0,0,0,211,212,5,123,0,0,212,64,
        1,0,0,0,213,214,7,5,0,0,214,66,1,0,0,0,215,216,7,6,0,0,216,68,1,
        0,0,0,217,218,3,41,20,0,218,219,3,45,22,0,219,70,1,0,0,0,220,221,
        3,45,22,0,221,222,3,41,20,0,222,72,1,0,0,0,223,226,3,51,25,0,224,
        227,3,67,33,0,225,227,3,51,25,0,226,224,1,0,0,0,226,225,1,0,0,0,
        227,74,1,0,0,0,18,0,77,83,89,92,97,100,105,111,117,123,134,143,165,
        167,178,183,226,0
    ]

class SmallScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMEXP = 1
    HEX_ = 2
    ST_INT = 3
    ST_FLOAT = 4
    P_START = 5
    P_END = 6
    SEP = 7
    STRING = 8
    COMMENT = 9
    BLK_START = 10
    BLK_END = 11
    CLOSE_PAREN = 12
    OPEN_PAREN = 13
    PIPE = 14
    PERIOD = 15
    SEMI = 16
    BIN_OP = 17
    LT = 18
    GT = 19
    MINUS = 20
    IDENT = 21
    CARROT = 22
    COLON = 23
    ASSIGN = 24
    HASH = 25
    DOLLAR = 26
    EXP = 27
    HEX = 28
    LITARR_START = 29
    DYNDICT_START = 30
    DYNARR_END = 31
    DYNARR_START = 32
    DIGIT = 33
    HEXDIGIT = 34
    KEYWORD = 35
    BLK_PARAM = 36
    CHAR = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "')'", "'('", "'|'", "'.'", "';'", "'<'", "'>'", 
            "'-'", "'^'", "':'", "':='", "'#'", "'$'", "'e'", "'16r'", "'#('", 
            "'#{'", "'}'", "'{'" ]

    symbolicNames = [ "<INVALID>",
            "NUMEXP", "HEX_", "ST_INT", "ST_FLOAT", "P_START", "P_END", 
            "SEP", "STRING", "COMMENT", "BLK_START", "BLK_END", "CLOSE_PAREN", 
            "OPEN_PAREN", "PIPE", "PERIOD", "SEMI", "BIN_OP", "LT", "GT", 
            "MINUS", "IDENT", "CARROT", "COLON", "ASSIGN", "HASH", "DOLLAR", 
            "EXP", "HEX", "LITARR_START", "DYNDICT_START", "DYNARR_END", 
            "DYNARR_START", "DIGIT", "HEXDIGIT", "KEYWORD", "BLK_PARAM", 
            "CHAR" ]

    ruleNames = [ "NUMEXP", "HEX_", "ST_INT", "ST_FLOAT", "P_START", "P_END", 
                  "SEP", "STRING", "COMMENT", "BLK_START", "BLK_END", "CLOSE_PAREN", 
                  "OPEN_PAREN", "PIPE", "PERIOD", "SEMI", "BIN_OP", "LT", 
                  "GT", "MINUS", "IDENT", "CARROT", "COLON", "ASSIGN", "HASH", 
                  "DOLLAR", "EXP", "HEX", "LITARR_START", "DYNDICT_START", 
                  "DYNARR_END", "DYNARR_START", "DIGIT", "HEXDIGIT", "KEYWORD", 
                  "BLK_PARAM", "CHAR" ]

    grammarFileName = "SmallScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


