# Generated from SmallScript.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,227,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,3,0,76,8,0,1,0,1,0,1,0,
        1,1,3,1,82,8,1,1,1,1,1,4,1,86,8,1,11,1,12,1,87,1,2,3,2,91,8,2,1,
        2,4,2,94,8,2,11,2,12,2,95,1,3,3,3,99,8,3,1,3,4,3,102,8,3,11,3,12,
        3,103,1,3,1,3,4,3,108,8,3,11,3,12,3,109,1,4,1,4,5,4,114,8,4,10,4,
        12,4,117,9,4,1,5,5,5,120,8,5,10,5,12,5,123,9,5,1,5,1,5,1,6,1,6,1,
        7,1,7,5,7,131,8,7,10,7,12,7,134,9,7,1,7,1,7,1,8,1,8,5,8,140,8,8,
        10,8,12,8,143,9,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,4,16,164,8,16,11,16,
        12,16,165,1,17,1,17,1,18,1,18,1,19,1,19,1,20,4,20,175,8,20,11,20,
        12,20,176,1,20,5,20,180,8,20,10,20,12,20,183,9,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,
        1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
        1,33,1,33,1,34,1,34,1,34,1,35,1,35,4,35,221,8,35,11,35,12,35,222,
        1,35,3,35,226,8,35,2,132,141,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,7,3,0,9,10,13,13,32,
        32,7,0,37,37,42,44,47,47,60,62,64,64,92,92,126,126,3,0,38,38,45,
        45,63,63,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,3,0,48,57,65,70,97,102,245,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,75,1,0,0,0,3,81,1,0,0,
        0,5,90,1,0,0,0,7,98,1,0,0,0,9,111,1,0,0,0,11,121,1,0,0,0,13,126,
        1,0,0,0,15,128,1,0,0,0,17,137,1,0,0,0,19,146,1,0,0,0,21,148,1,0,
        0,0,23,150,1,0,0,0,25,152,1,0,0,0,27,154,1,0,0,0,29,156,1,0,0,0,
        31,158,1,0,0,0,33,163,1,0,0,0,35,167,1,0,0,0,37,169,1,0,0,0,39,171,
        1,0,0,0,41,174,1,0,0,0,43,184,1,0,0,0,45,186,1,0,0,0,47,188,1,0,
        0,0,49,191,1,0,0,0,51,193,1,0,0,0,53,195,1,0,0,0,55,197,1,0,0,0,
        57,200,1,0,0,0,59,203,1,0,0,0,61,206,1,0,0,0,63,208,1,0,0,0,65,210,
        1,0,0,0,67,212,1,0,0,0,69,215,1,0,0,0,71,218,1,0,0,0,73,76,3,7,3,
        0,74,76,3,5,2,0,75,73,1,0,0,0,75,74,1,0,0,0,76,77,1,0,0,0,77,78,
        3,53,26,0,78,79,3,5,2,0,79,2,1,0,0,0,80,82,3,39,19,0,81,80,1,0,0,
        0,81,82,1,0,0,0,82,83,1,0,0,0,83,85,3,55,27,0,84,86,3,65,32,0,85,
        84,1,0,0,0,86,87,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,4,1,0,0,
        0,89,91,3,39,19,0,90,89,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,94,
        3,63,31,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,
        0,96,6,1,0,0,0,97,99,3,39,19,0,98,97,1,0,0,0,98,99,1,0,0,0,99,101,
        1,0,0,0,100,102,3,63,31,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,
        1,0,0,0,103,104,1,0,0,0,104,105,1,0,0,0,105,107,3,29,14,0,106,108,
        3,63,31,0,107,106,1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,
        1,0,0,0,110,8,1,0,0,0,111,115,3,35,17,0,112,114,3,13,6,0,113,112,
        1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,10,1,
        0,0,0,117,115,1,0,0,0,118,120,3,13,6,0,119,118,1,0,0,0,120,123,1,
        0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,121,1,
        0,0,0,124,125,3,37,18,0,125,12,1,0,0,0,126,127,7,0,0,0,127,14,1,
        0,0,0,128,132,5,39,0,0,129,131,9,0,0,0,130,129,1,0,0,0,131,134,1,
        0,0,0,132,133,1,0,0,0,132,130,1,0,0,0,133,135,1,0,0,0,134,132,1,
        0,0,0,135,136,5,39,0,0,136,16,1,0,0,0,137,141,5,34,0,0,138,140,9,
        0,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,142,1,0,0,0,141,139,1,
        0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,5,34,0,0,145,18,1,
        0,0,0,146,147,5,91,0,0,147,20,1,0,0,0,148,149,5,93,0,0,149,22,1,
        0,0,0,150,151,5,41,0,0,151,24,1,0,0,0,152,153,5,40,0,0,153,26,1,
        0,0,0,154,155,5,124,0,0,155,28,1,0,0,0,156,157,5,46,0,0,157,30,1,
        0,0,0,158,159,5,59,0,0,159,32,1,0,0,0,160,164,7,1,0,0,161,164,3,
        27,13,0,162,164,7,2,0,0,163,160,1,0,0,0,163,161,1,0,0,0,163,162,
        1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,34,1,
        0,0,0,167,168,5,60,0,0,168,36,1,0,0,0,169,170,5,62,0,0,170,38,1,
        0,0,0,171,172,5,45,0,0,172,40,1,0,0,0,173,175,7,3,0,0,174,173,1,
        0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,181,1,
        0,0,0,178,180,7,4,0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,
        0,0,0,181,182,1,0,0,0,182,42,1,0,0,0,183,181,1,0,0,0,184,185,5,94,
        0,0,185,44,1,0,0,0,186,187,5,58,0,0,187,46,1,0,0,0,188,189,5,58,
        0,0,189,190,5,61,0,0,190,48,1,0,0,0,191,192,5,35,0,0,192,50,1,0,
        0,0,193,194,5,36,0,0,194,52,1,0,0,0,195,196,5,101,0,0,196,54,1,0,
        0,0,197,198,5,48,0,0,198,199,5,120,0,0,199,56,1,0,0,0,200,201,5,
        35,0,0,201,202,5,40,0,0,202,58,1,0,0,0,203,204,5,35,0,0,204,205,
        5,123,0,0,205,60,1,0,0,0,206,207,5,125,0,0,207,62,1,0,0,0,208,209,
        7,5,0,0,209,64,1,0,0,0,210,211,7,6,0,0,211,66,1,0,0,0,212,213,3,
        41,20,0,213,214,3,45,22,0,214,68,1,0,0,0,215,216,3,45,22,0,216,217,
        3,41,20,0,217,70,1,0,0,0,218,225,3,51,25,0,219,221,3,65,32,0,220,
        219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,
        226,1,0,0,0,224,226,3,51,25,0,225,220,1,0,0,0,225,224,1,0,0,0,226,
        72,1,0,0,0,19,0,75,81,87,90,95,98,103,109,115,121,132,141,163,165,
        176,181,222,225,0
    ]

class SmallScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMEXP = 1
    HEX_ = 2
    ST_INT = 3
    ST_FLOAT = 4
    P_START = 5
    P_END = 6
    SEP = 7
    STRING = 8
    COMMENT = 9
    BLK_START = 10
    BLK_END = 11
    CLOSE_PAREN = 12
    OPEN_PAREN = 13
    PIPE = 14
    PERIOD = 15
    SEMI = 16
    BIN_OP = 17
    LT = 18
    GT = 19
    MINUS = 20
    IDENT = 21
    CARROT = 22
    COLON = 23
    ASSIGN = 24
    HASH = 25
    DOLLAR = 26
    EXP = 27
    HEX = 28
    LITARR_START = 29
    DYNARR_START = 30
    DYNARR_END = 31
    DIGIT = 32
    HEXDIGIT = 33
    KEYWORD = 34
    BLK_PARAM = 35
    CHAR = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "')'", "'('", "'|'", "'.'", "';'", "'<'", "'>'", 
            "'-'", "'^'", "':'", "':='", "'#'", "'$'", "'e'", "'0x'", "'#('", 
            "'#{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "NUMEXP", "HEX_", "ST_INT", "ST_FLOAT", "P_START", "P_END", 
            "SEP", "STRING", "COMMENT", "BLK_START", "BLK_END", "CLOSE_PAREN", 
            "OPEN_PAREN", "PIPE", "PERIOD", "SEMI", "BIN_OP", "LT", "GT", 
            "MINUS", "IDENT", "CARROT", "COLON", "ASSIGN", "HASH", "DOLLAR", 
            "EXP", "HEX", "LITARR_START", "DYNARR_START", "DYNARR_END", 
            "DIGIT", "HEXDIGIT", "KEYWORD", "BLK_PARAM", "CHAR" ]

    ruleNames = [ "NUMEXP", "HEX_", "ST_INT", "ST_FLOAT", "P_START", "P_END", 
                  "SEP", "STRING", "COMMENT", "BLK_START", "BLK_END", "CLOSE_PAREN", 
                  "OPEN_PAREN", "PIPE", "PERIOD", "SEMI", "BIN_OP", "LT", 
                  "GT", "MINUS", "IDENT", "CARROT", "COLON", "ASSIGN", "HASH", 
                  "DOLLAR", "EXP", "HEX", "LITARR_START", "DYNARR_START", 
                  "DYNARR_END", "DIGIT", "HEXDIGIT", "KEYWORD", "BLK_PARAM", 
                  "CHAR" ]

    grammarFileName = "SmallScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


